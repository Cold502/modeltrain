
=== 刷新模型请求 2025-06-28 17:27:06.057577 ===
endpoint: 'http://192.168.2.200/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 24

=== 刷新模型请求 2025-06-28 17:30:47.172355 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29

=== 刷新模型请求 2025-06-28 17:32:09.417249 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29

=== 刷新模型请求 2025-06-28 17:33:57.777006 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 17:34:09.408040 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 18:31:11.383351 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 18:33:54.670097 ===
endpoint: 'http://192.168.2.200/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 24
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200/v1/'
  清理后endpoint: 'http://192.168.2.200/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200/v1/models'
连接错误详情:
  错误类型: ConnectError
  错误信息: All connection attempts failed
  尝试连接的URL: http://192.168.2.200/v1/models

=== 刷新模型请求 2025-06-28 18:34:05.723588 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 18:36:39.386875 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 18:38:18.215400 ===
endpoint: 'http://127.0.0.1:8000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 25
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:8000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://127.0.0.1:8000/v1/'
  清理后endpoint: 'http://127.0.0.1:8000/v1'
  是否以/v1结尾: True
  最终URL: 'http://127.0.0.1:8000/v1/models'

=== 刷新模型请求 2025-06-28 18:38:29.033304 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 18:44:09.864996 ===
endpoint: 'http://192.168.2.200/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 24
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200/v1/'
  清理后endpoint: 'http://192.168.2.200/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200/v1/models'
连接错误详情:
  错误类型: ConnectError
  错误信息: All connection attempts failed
  尝试连接的URL: http://192.168.2.200/v1/models

=== 刷新模型请求 2025-06-28 18:44:14.931521 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-28 18:46:45.086854 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-30 09:29:11.102587 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'

=== 刷新模型请求 2025-06-30 12:42:24.421527 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-06-30 13:34:56.578722 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-07-01 13:53:21.854641 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-07-01 14:38:45.453831 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-07-01 14:38:48.941181 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-07-01 17:12:07.202233 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-07-14 18:17:23.985858 ===
endpoint: 'http://192.168.2.151/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 24
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.151/api', provider_id='ollama'
连接错误详情:
  错误类型: ConnectError
  错误信息: All connection attempts failed
  尝试连接的URL: http://192.168.2.151/api/tags

=== 刷新模型请求 2025-07-25 10:31:39.151288 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-07-25 14:43:33.733425 ===
endpoint: 'https://api.deepseek.com/v1/'
provider_id: 'deepseek'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 28
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='https://api.deepseek.com/v1/', provider_id='deepseek'
URL构建详情:
  原始endpoint: 'https://api.deepseek.com/v1/'
  清理后endpoint: 'https://api.deepseek.com/v1'
  是否以/v1结尾: True
  最终URL: 'https://api.deepseek.com/v1/models'
fetch_models_from_api 返回了 2 个模型

=== 刷新模型请求 2025-07-26 09:34:21.275226 ===
endpoint: 'https://api.deepseek.com/v1/'
provider_id: 'deepseek'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 28
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='https://api.deepseek.com/v1/', provider_id='deepseek'
URL构建详情:
  原始endpoint: 'https://api.deepseek.com/v1/'
  清理后endpoint: 'https://api.deepseek.com/v1'
  是否以/v1结尾: True
  最终URL: 'https://api.deepseek.com/v1/models'
fetch_models_from_api 返回了 2 个模型

=== 刷新模型请求 2025-07-31 14:42:18.065340 ===
endpoint: 'http://192.168.2.200:9000/v1/'
provider_id: 'vllm'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 29
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://192.168.2.200:9000/v1/', provider_id='vllm'
URL构建详情:
  原始endpoint: 'http://192.168.2.200:9000/v1/'
  清理后endpoint: 'http://192.168.2.200:9000/v1'
  是否以/v1结尾: True
  最终URL: 'http://192.168.2.200:9000/v1/models'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-08-08 09:32:10.801304 ===
endpoint: 'http://127.0.0.1:11434/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 26
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:11434/api', provider_id='ollama'
fetch_models_from_api 返回了 0 个模型

=== 刷新模型请求 2025-08-08 09:33:17.519172 ===
endpoint: 'http://127.0.0.1:11434/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 26
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:11434/api', provider_id='ollama'
fetch_models_from_api 返回了 0 个模型

=== 刷新模型请求 2025-08-08 09:33:20.011116 ===
endpoint: 'http://127.0.0.1:11434/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 26
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:11434/api', provider_id='ollama'
fetch_models_from_api 返回了 0 个模型

=== 刷新模型请求 2025-08-08 09:36:36.374943 ===
endpoint: 'http://127.0.0.1:11434/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 26
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:11434/api', provider_id='ollama'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-08-08 09:39:38.253287 ===
endpoint: 'http://127.0.0.1:11434/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 26
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:11434/api', provider_id='ollama'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-08-08 09:47:41.095398 ===
endpoint: 'http://127.0.0.1:11434/api'
provider_id: 'ollama'
api_key: None
endpoint类型: <class 'str'>
endpoint长度: 26
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='http://127.0.0.1:11434/api', provider_id='ollama'
fetch_models_from_api 返回了 1 个模型

=== 刷新模型请求 2025-08-09 16:24:11.469221 ===
endpoint: 'https://api.deepseek.com/v1/'
provider_id: 'deepseek'
api_key: ***
endpoint类型: <class 'str'>
endpoint长度: 28
进入try块，准备处理请求...
开始调用 fetch_models_from_api...
fetch_models_from_api 函数开始执行
  参数: endpoint='https://api.deepseek.com/v1/', provider_id='deepseek'
URL构建详情:
  原始endpoint: 'https://api.deepseek.com/v1/'
  清理后endpoint: 'https://api.deepseek.com/v1'
  是否以/v1结尾: True
  最终URL: 'https://api.deepseek.com/v1/models'
fetch_models_from_api 返回了 2 个模型
